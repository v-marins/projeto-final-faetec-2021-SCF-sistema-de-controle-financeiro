/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.sql.*;
import dal.ModuloConexao;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import static view.TelaPrincipal.id_usuario;

/**
 *
 * @author vmari
 */
public class TelaEditar extends javax.swing.JDialog {

    Connection conexao = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    int anoFixo = 0;
    int mesFixo = 0;
    int diaFixo = 0; // Recebem data atual.
    int anoAltera = 0;
    int mesAltera = 0;
    int diaAltera = 0;
    int valorSelecao = 0;
    int diaClique = 0; // Usada para verificar e setar labelData em 1.
    String tipolancamento = ""; //recebe String referente aos Radios do form.

    public TelaEditar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        conexao = ModuloConexao.conector();
        povoar_tabelaCad();
        IniciaCalendario();
        Calendario_Evt();
        ComboBoxCategoria();
        jLayeredPaneCalendar.setVisible(false);

    }

    TelaEditar() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPaneCalendar = new javax.swing.JLayeredPane();
        selecaoMes = new javax.swing.JComboBox<>();
        selecaoAno = new javax.swing.JComboBox<>();
        jSpinner1 = new javax.swing.JSpinner();
        ls1 = new javax.swing.JLabel();
        ls2 = new javax.swing.JLabel();
        ls3 = new javax.swing.JLabel();
        ls4 = new javax.swing.JLabel();
        ls5 = new javax.swing.JLabel();
        ls6 = new javax.swing.JLabel();
        ls7 = new javax.swing.JLabel();
        t1 = new javax.swing.JLabel();
        t8 = new javax.swing.JLabel();
        t15 = new javax.swing.JLabel();
        t22 = new javax.swing.JLabel();
        t29 = new javax.swing.JLabel();
        t36 = new javax.swing.JLabel();
        t2 = new javax.swing.JLabel();
        t3 = new javax.swing.JLabel();
        t4 = new javax.swing.JLabel();
        t5 = new javax.swing.JLabel();
        t6 = new javax.swing.JLabel();
        t13 = new javax.swing.JLabel();
        t9 = new javax.swing.JLabel();
        t16 = new javax.swing.JLabel();
        t23 = new javax.swing.JLabel();
        t30 = new javax.swing.JLabel();
        t37 = new javax.swing.JLabel();
        t10 = new javax.swing.JLabel();
        t17 = new javax.swing.JLabel();
        t24 = new javax.swing.JLabel();
        t31 = new javax.swing.JLabel();
        t38 = new javax.swing.JLabel();
        t11 = new javax.swing.JLabel();
        t18 = new javax.swing.JLabel();
        t25 = new javax.swing.JLabel();
        t32 = new javax.swing.JLabel();
        t39 = new javax.swing.JLabel();
        t12 = new javax.swing.JLabel();
        t19 = new javax.swing.JLabel();
        t26 = new javax.swing.JLabel();
        t33 = new javax.swing.JLabel();
        t40 = new javax.swing.JLabel();
        t41 = new javax.swing.JLabel();
        t14 = new javax.swing.JLabel();
        t20 = new javax.swing.JLabel();
        t27 = new javax.swing.JLabel();
        t34 = new javax.swing.JLabel();
        t7 = new javax.swing.JLabel();
        t42 = new javax.swing.JLabel();
        t21 = new javax.swing.JLabel();
        t28 = new javax.swing.JLabel();
        t35 = new javax.swing.JLabel();
        receita = new javax.swing.JRadioButton();
        despesa = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbxCategoria = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbxStatus = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCadId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEdit = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        btnCadEditar = new javax.swing.JButton();
        btnCadDeletar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SCF -  Editar / Exclur Lançamento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLayeredPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLayeredPane1.setPreferredSize(new java.awt.Dimension(60, 60));
        jLayeredPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLayeredPane1MouseClicked(evt);
            }
        });
        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLayeredPaneCalendar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLayeredPaneCalendar.setOpaque(true);

        selecaoMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        selecaoMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecaoMesActionPerformed(evt);
            }
        });
        jLayeredPaneCalendar.add(selecaoMes);
        selecaoMes.setBounds(10, 10, 111, 20);

        selecaoAno.setEditable(true);
        selecaoAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecaoAnoActionPerformed(evt);
            }
        });
        jLayeredPaneCalendar.add(selecaoAno);
        selecaoAno.setBounds(160, 10, 120, 20);

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jLayeredPaneCalendar.add(jSpinner1);
        jSpinner1.setBounds(120, 10, 20, 20);

        ls1.setBackground(new java.awt.Color(153, 255, 204));
        ls1.setForeground(new java.awt.Color(255, 0, 0));
        ls1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls1.setText("DOM");
        ls1.setOpaque(true);
        jLayeredPaneCalendar.add(ls1);
        ls1.setBounds(10, 40, 31, 14);

        ls2.setBackground(new java.awt.Color(153, 255, 204));
        ls2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls2.setText("SEG");
        ls2.setOpaque(true);
        jLayeredPaneCalendar.add(ls2);
        ls2.setBounds(50, 40, 31, 14);

        ls3.setBackground(new java.awt.Color(153, 255, 204));
        ls3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls3.setText("TER");
        ls3.setOpaque(true);
        jLayeredPaneCalendar.add(ls3);
        ls3.setBounds(90, 40, 30, 14);

        ls4.setBackground(new java.awt.Color(153, 255, 204));
        ls4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls4.setText("QUA");
        ls4.setOpaque(true);
        jLayeredPaneCalendar.add(ls4);
        ls4.setBounds(130, 40, 30, 14);

        ls5.setBackground(new java.awt.Color(153, 255, 204));
        ls5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls5.setText("QUI");
        ls5.setOpaque(true);
        jLayeredPaneCalendar.add(ls5);
        ls5.setBounds(170, 40, 30, 14);

        ls6.setBackground(new java.awt.Color(153, 255, 204));
        ls6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls6.setText("SEX");
        ls6.setOpaque(true);
        jLayeredPaneCalendar.add(ls6);
        ls6.setBounds(210, 40, 29, 14);

        ls7.setBackground(new java.awt.Color(153, 255, 204));
        ls7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ls7.setText("SAB");
        ls7.setOpaque(true);
        jLayeredPaneCalendar.add(ls7);
        ls7.setBounds(250, 40, 32, 14);

        t1.setBackground(new java.awt.Color(204, 204, 204));
        t1.setForeground(new java.awt.Color(255, 0, 0));
        t1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t1.setText("30");
        jLayeredPaneCalendar.add(t1);
        t1.setBounds(10, 60, 30, 14);

        t8.setBackground(new java.awt.Color(204, 204, 204));
        t8.setForeground(new java.awt.Color(255, 0, 0));
        t8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t8.setText("30");
        jLayeredPaneCalendar.add(t8);
        t8.setBounds(10, 80, 30, 14);

        t15.setBackground(new java.awt.Color(204, 204, 204));
        t15.setForeground(new java.awt.Color(255, 0, 0));
        t15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t15.setText("30");
        jLayeredPaneCalendar.add(t15);
        t15.setBounds(10, 100, 30, 14);

        t22.setBackground(new java.awt.Color(204, 204, 204));
        t22.setForeground(new java.awt.Color(255, 0, 0));
        t22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t22.setText("30");
        jLayeredPaneCalendar.add(t22);
        t22.setBounds(10, 120, 30, 14);

        t29.setBackground(new java.awt.Color(204, 204, 204));
        t29.setForeground(new java.awt.Color(255, 0, 0));
        t29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t29.setText("30");
        jLayeredPaneCalendar.add(t29);
        t29.setBounds(10, 140, 30, 14);

        t36.setBackground(new java.awt.Color(204, 204, 204));
        t36.setForeground(new java.awt.Color(255, 0, 0));
        t36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t36.setText("30");
        jLayeredPaneCalendar.add(t36);
        t36.setBounds(10, 160, 30, 14);

        t2.setBackground(new java.awt.Color(204, 204, 204));
        t2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t2.setText("30");
        jLayeredPaneCalendar.add(t2);
        t2.setBounds(50, 60, 31, 14);

        t3.setBackground(new java.awt.Color(204, 204, 204));
        t3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t3.setText("30");
        jLayeredPaneCalendar.add(t3);
        t3.setBounds(90, 60, 30, 14);

        t4.setBackground(new java.awt.Color(204, 204, 204));
        t4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t4.setText("30");
        jLayeredPaneCalendar.add(t4);
        t4.setBounds(130, 60, 30, 14);

        t5.setBackground(new java.awt.Color(204, 204, 204));
        t5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t5.setText("30");
        jLayeredPaneCalendar.add(t5);
        t5.setBounds(170, 60, 30, 14);

        t6.setBackground(new java.awt.Color(204, 204, 204));
        t6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t6.setText("30");
        jLayeredPaneCalendar.add(t6);
        t6.setBounds(210, 60, 29, 14);

        t13.setBackground(new java.awt.Color(204, 204, 204));
        t13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t13.setText("30");
        jLayeredPaneCalendar.add(t13);
        t13.setBounds(210, 80, 30, 14);

        t9.setBackground(new java.awt.Color(204, 204, 204));
        t9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t9.setText("30");
        jLayeredPaneCalendar.add(t9);
        t9.setBounds(50, 80, 31, 14);

        t16.setBackground(new java.awt.Color(204, 204, 204));
        t16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t16.setText("30");
        jLayeredPaneCalendar.add(t16);
        t16.setBounds(50, 100, 31, 14);

        t23.setBackground(new java.awt.Color(204, 204, 204));
        t23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t23.setText("30");
        jLayeredPaneCalendar.add(t23);
        t23.setBounds(50, 120, 31, 14);

        t30.setBackground(new java.awt.Color(204, 204, 204));
        t30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t30.setText("30");
        jLayeredPaneCalendar.add(t30);
        t30.setBounds(50, 140, 31, 14);

        t37.setBackground(new java.awt.Color(204, 204, 204));
        t37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t37.setText("30");
        jLayeredPaneCalendar.add(t37);
        t37.setBounds(50, 160, 31, 14);

        t10.setBackground(new java.awt.Color(204, 204, 204));
        t10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t10.setText("30");
        jLayeredPaneCalendar.add(t10);
        t10.setBounds(90, 80, 32, 14);

        t17.setBackground(new java.awt.Color(204, 204, 204));
        t17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t17.setText("30");
        jLayeredPaneCalendar.add(t17);
        t17.setBounds(90, 100, 32, 14);

        t24.setBackground(new java.awt.Color(204, 204, 204));
        t24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t24.setText("30");
        jLayeredPaneCalendar.add(t24);
        t24.setBounds(90, 120, 32, 14);

        t31.setBackground(new java.awt.Color(204, 204, 204));
        t31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t31.setText("30");
        jLayeredPaneCalendar.add(t31);
        t31.setBounds(90, 140, 32, 14);

        t38.setBackground(new java.awt.Color(204, 204, 204));
        t38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t38.setText("30");
        jLayeredPaneCalendar.add(t38);
        t38.setBounds(90, 160, 32, 14);

        t11.setBackground(new java.awt.Color(204, 204, 204));
        t11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t11.setText("30");
        jLayeredPaneCalendar.add(t11);
        t11.setBounds(130, 80, 30, 14);

        t18.setBackground(new java.awt.Color(204, 204, 204));
        t18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t18.setText("30");
        jLayeredPaneCalendar.add(t18);
        t18.setBounds(130, 100, 30, 14);

        t25.setBackground(new java.awt.Color(204, 204, 204));
        t25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t25.setText("30");
        jLayeredPaneCalendar.add(t25);
        t25.setBounds(130, 120, 30, 14);

        t32.setBackground(new java.awt.Color(204, 204, 204));
        t32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t32.setText("30");
        jLayeredPaneCalendar.add(t32);
        t32.setBounds(130, 140, 30, 14);

        t39.setBackground(new java.awt.Color(204, 204, 204));
        t39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t39.setText("30");
        jLayeredPaneCalendar.add(t39);
        t39.setBounds(130, 160, 30, 14);

        t12.setBackground(new java.awt.Color(204, 204, 204));
        t12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t12.setText("30");
        jLayeredPaneCalendar.add(t12);
        t12.setBounds(170, 80, 30, 14);

        t19.setBackground(new java.awt.Color(204, 204, 204));
        t19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t19.setText("30");
        jLayeredPaneCalendar.add(t19);
        t19.setBounds(170, 100, 30, 14);

        t26.setBackground(new java.awt.Color(204, 204, 204));
        t26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t26.setText("30");
        jLayeredPaneCalendar.add(t26);
        t26.setBounds(170, 120, 30, 14);

        t33.setBackground(new java.awt.Color(204, 204, 204));
        t33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t33.setText("30");
        jLayeredPaneCalendar.add(t33);
        t33.setBounds(170, 140, 30, 14);

        t40.setBackground(new java.awt.Color(204, 204, 204));
        t40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t40.setText("30");
        jLayeredPaneCalendar.add(t40);
        t40.setBounds(170, 160, 30, 14);

        t41.setBackground(new java.awt.Color(204, 204, 204));
        t41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t41.setText("30");
        jLayeredPaneCalendar.add(t41);
        t41.setBounds(210, 160, 30, 14);

        t14.setBackground(new java.awt.Color(204, 204, 204));
        t14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t14.setText("30");
        jLayeredPaneCalendar.add(t14);
        t14.setBounds(250, 80, 30, 14);

        t20.setBackground(new java.awt.Color(204, 204, 204));
        t20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t20.setText("30");
        jLayeredPaneCalendar.add(t20);
        t20.setBounds(210, 100, 30, 14);

        t27.setBackground(new java.awt.Color(204, 204, 204));
        t27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t27.setText("30");
        jLayeredPaneCalendar.add(t27);
        t27.setBounds(210, 120, 30, 14);

        t34.setBackground(new java.awt.Color(204, 204, 204));
        t34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t34.setText("30");
        jLayeredPaneCalendar.add(t34);
        t34.setBounds(210, 140, 30, 14);

        t7.setBackground(new java.awt.Color(204, 204, 204));
        t7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t7.setText("30");
        jLayeredPaneCalendar.add(t7);
        t7.setBounds(250, 60, 30, 14);

        t42.setBackground(new java.awt.Color(204, 204, 204));
        t42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t42.setText("30");
        jLayeredPaneCalendar.add(t42);
        t42.setBounds(250, 160, 30, 14);

        t21.setBackground(new java.awt.Color(204, 204, 204));
        t21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t21.setText("30");
        jLayeredPaneCalendar.add(t21);
        t21.setBounds(250, 100, 30, 14);

        t28.setBackground(new java.awt.Color(204, 204, 204));
        t28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t28.setText("30");
        jLayeredPaneCalendar.add(t28);
        t28.setBounds(250, 120, 30, 14);

        t35.setBackground(new java.awt.Color(204, 204, 204));
        t35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        t35.setText("30");
        jLayeredPaneCalendar.add(t35);
        t35.setBounds(250, 140, 30, 14);

        jLayeredPane1.add(jLayeredPaneCalendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, 290, 190));

        buttonGroup1.add(receita);
        receita.setText("Receita");
        receita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receitaActionPerformed(evt);
            }
        });
        jLayeredPane1.add(receita, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, -1, -1));

        buttonGroup1.add(despesa);
        despesa.setText("Despesa");
        despesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                despesaActionPerformed(evt);
            }
        });
        jLayeredPane1.add(despesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, -1, -1));

        jLabel1.setText("Descrição:*");
        jLayeredPane1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));
        jLayeredPane1.add(txtDescricao, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 240, 266, -1));

        jLabel2.setText("Valor:*");
        jLayeredPane1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));
        jLayeredPane1.add(txtValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 88, -1));

        jLabel3.setText("Categoria:*");
        jLayeredPane1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        cbxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));
        jLayeredPane1.add(cbxCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 191, -1));

        jLabel4.setText("Status:*");
        jLayeredPane1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, -1, -1));

        cbxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Pendente", "Pago" }));
        jLayeredPane1.add(cbxStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 300, 125, -1));

        jLabel5.setText("Data:*");
        jLayeredPane1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, -1, -1));

        txtData.setText("00/00/0000");
        txtData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDataMouseClicked(evt);
            }
        });
        jLayeredPane1.add(txtData, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, 84, -1));

        jLabel6.setText("ID:");
        jLayeredPane1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, -1, -1));

        txtCadId.setEditable(false);
        txtCadId.setEnabled(false);
        txtCadId.setFocusable(false);
        jLayeredPane1.add(txtCadId, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 260, 50, 30));

        jTableEdit = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jTableEdit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableEdit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableEdit.setToolTipText("Selecione para EDITAR ou EXCLUIR");
        jTableEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableEdit.setFocusable(false);
        jTableEdit.getTableHeader().setReorderingAllowed(false);
        jTableEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEditMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEdit);

        jLayeredPane1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, 130));
        jLayeredPane1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 450, 10));

        btnCadEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/edit.png"))); // NOI18N
        btnCadEditar.setToolTipText("Alterar");
        btnCadEditar.setPreferredSize(new java.awt.Dimension(60, 60));
        btnCadEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadEditarActionPerformed(evt);
            }
        });
        jLayeredPane1.add(btnCadEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 450, -1, -1));

        btnCadDeletar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        btnCadDeletar.setToolTipText("Excluir");
        btnCadDeletar.setPreferredSize(new java.awt.Dimension(60, 60));
        btnCadDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadDeletarActionPerformed(evt);
            }
        });
        jLayeredPane1.add(btnCadDeletar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 450, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("* Campos Obrigatórios.");
        jLayeredPane1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 190, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Editar:");
        jLayeredPane1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 50, 20));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/logo1-removebg.png"))); // NOI18N
        jLabel9.setText("jLabel9");
        jLayeredPane1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 100, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(538, 592));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void receitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receitaActionPerformed
        if (receita.isSelected()) {
            tipolancamento = "Receita";
        }
    }//GEN-LAST:event_receitaActionPerformed

    private void selecaoMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecaoMesActionPerformed
        try {

            diaAltera = diaFixo;
            Calendario();
            //InsereCorCalendario();

        } catch (Exception err) {
            System.out.println(err);
        }


    }//GEN-LAST:event_selecaoMesActionPerformed

    private void selecaoAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecaoAnoActionPerformed
        try {

            int x = Integer.parseInt(selecaoAno.getSelectedItem().toString());
            diaAltera = diaFixo;
            Calendario();
            // InsereCorCalendario();

        } catch (Exception e) {
            selecaoAno.setSelectedItem(anoFixo);
            //  InsereCorCalendario();
        }

    }//GEN-LAST:event_selecaoAnoActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged

        //Configura o jspinner para alterar o mês na ComboBox.
        valorSelecao = Integer.parseInt(jSpinner1.getValue().toString());
        int x = selecaoMes.getSelectedIndex();
        int ano = Integer.parseInt(selecaoAno.getSelectedItem().toString());

        if (valorSelecao == 1) {
            if (selecaoMes.getSelectedIndex() != 11) {
                selecaoMes.setSelectedIndex(x + 1);
            } else {
                selecaoMes.setSelectedIndex(0);
                ano = ano + 1;
                selecaoAno.setSelectedItem(ano);
            }
        }

        if (valorSelecao == -1) {
            if (selecaoMes.getSelectedIndex() != 0) {
                selecaoMes.setSelectedIndex(x - 1);
            } else {
                selecaoMes.setSelectedIndex(11);
                ano = ano - 1;
                selecaoAno.setSelectedItem(ano);
            }
        }

        jSpinner1.setValue(0);

    }//GEN-LAST:event_jSpinner1StateChanged

    private void despesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_despesaActionPerformed
        if (despesa.isSelected()) {
            tipolancamento = "Despesa";
        }
    }//GEN-LAST:event_despesaActionPerformed

    private void txtDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDataMouseClicked

        jLayeredPaneCalendar.setVisible(true);


    }//GEN-LAST:event_txtDataMouseClicked

    private void btnCadDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadDeletarActionPerformed
        // chama o método deletar
        excluir();
        povoar_tabelaCad();


    }//GEN-LAST:event_btnCadDeletarActionPerformed

    private void btnCadEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadEditarActionPerformed
        alterar();
        povoar_tabelaCad();
    }//GEN-LAST:event_btnCadEditarActionPerformed

    private void jTableEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEditMouseClicked

        // seta os campos atraves da janela
        setarCampos();
    }//GEN-LAST:event_jTableEditMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Abrindo a janela com o Radio "receita" já selecionado.

        receita.setSelected(true);
        tipolancamento = "Receita";
        povoar_tabelaCad();


    }//GEN-LAST:event_formWindowOpened

    private void jLayeredPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLayeredPane1MouseClicked
        jLayeredPaneCalendar.setVisible(false);
    }//GEN-LAST:event_jLayeredPane1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEditar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaEditar dialog = new TelaEditar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadDeletar;
    private javax.swing.JButton btnCadEditar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxCategoria;
    private javax.swing.JComboBox<String> cbxStatus;
    private javax.swing.JRadioButton despesa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPaneCalendar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTableEdit;
    private javax.swing.JLabel ls1;
    private javax.swing.JLabel ls2;
    private javax.swing.JLabel ls3;
    private javax.swing.JLabel ls4;
    private javax.swing.JLabel ls5;
    private javax.swing.JLabel ls6;
    private javax.swing.JLabel ls7;
    private javax.swing.JRadioButton receita;
    private javax.swing.JComboBox<String> selecaoAno;
    private javax.swing.JComboBox<String> selecaoMes;
    private javax.swing.JLabel t1;
    private javax.swing.JLabel t10;
    private javax.swing.JLabel t11;
    private javax.swing.JLabel t12;
    private javax.swing.JLabel t13;
    private javax.swing.JLabel t14;
    private javax.swing.JLabel t15;
    private javax.swing.JLabel t16;
    private javax.swing.JLabel t17;
    private javax.swing.JLabel t18;
    private javax.swing.JLabel t19;
    private javax.swing.JLabel t2;
    private javax.swing.JLabel t20;
    private javax.swing.JLabel t21;
    private javax.swing.JLabel t22;
    private javax.swing.JLabel t23;
    private javax.swing.JLabel t24;
    private javax.swing.JLabel t25;
    private javax.swing.JLabel t26;
    private javax.swing.JLabel t27;
    private javax.swing.JLabel t28;
    private javax.swing.JLabel t29;
    private javax.swing.JLabel t3;
    private javax.swing.JLabel t30;
    private javax.swing.JLabel t31;
    private javax.swing.JLabel t32;
    private javax.swing.JLabel t33;
    private javax.swing.JLabel t34;
    private javax.swing.JLabel t35;
    private javax.swing.JLabel t36;
    private javax.swing.JLabel t37;
    private javax.swing.JLabel t38;
    private javax.swing.JLabel t39;
    private javax.swing.JLabel t4;
    private javax.swing.JLabel t40;
    private javax.swing.JLabel t41;
    private javax.swing.JLabel t42;
    private javax.swing.JLabel t5;
    private javax.swing.JLabel t6;
    private javax.swing.JLabel t7;
    private javax.swing.JLabel t8;
    private javax.swing.JLabel t9;
    private javax.swing.JTextField txtCadId;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    public void IniciaCalendario() {

// Criando Objetos para capturar e manipular (formatar) dia,mes e ano atual.    
        SimpleDateFormat ano = new SimpleDateFormat("yyyy");
        SimpleDateFormat mes = new SimpleDateFormat("MM");
        SimpleDateFormat dia = new SimpleDateFormat("dd");

// Guardando informações nas variaveis.
        anoFixo = Integer.parseInt(ano.format(new Date()));
        mesFixo = Integer.parseInt(mes.format(new Date()));
        diaFixo = Integer.parseInt(dia.format(new Date()));

//JOptionPane.showMessageDialog(null, diaFixo +"/"+ mesFixo +"/"+ anoFixo);
// Definindo o ano máximo disponível no calendário.
        int anoMaximo = anoFixo + 50;
        for (int i = 2000; i < anoMaximo; i++) {
//Adiciona ao Combobox de seleção de anos
            selecaoAno.addItem(String.valueOf(i));
        }
        selecaoAno.setSelectedItem(anoFixo);
// Seta o comboBox para o ano atual.

// Seta ao comboBox de mês, o mês atual.
        switch (mesFixo) {
            case 1:
                selecaoMes.setSelectedIndex(0);
                break;
            case 2:
                selecaoMes.setSelectedIndex(1);
                break;
            case 3:
                selecaoMes.setSelectedIndex(2);
                break;
            case 4:
                selecaoMes.setSelectedIndex(3);
                break;
            case 5:
                selecaoMes.setSelectedIndex(4);
                break;
            case 6:
                selecaoMes.setSelectedIndex(5);
                break;
            case 7:
                selecaoMes.setSelectedIndex(6);
                break;
            case 8:
                selecaoMes.setSelectedIndex(7);
                break;
            case 9:
                selecaoMes.setSelectedIndex(8);
                break;
            case 10:
                selecaoMes.setSelectedIndex(9);
                break;
            case 11:
                selecaoMes.setSelectedIndex(10);
                break;
            case 12:
                selecaoMes.setSelectedIndex(11);
                break;
            default:
                break;
        }

    }

    public void Calendario() {

// Zerando as variaveis referente aos dias.    
        t1.setText("");
        t2.setText("");
        t3.setText("");
        t4.setText("");
        t5.setText("");
        t6.setText("");
        t7.setText("");
        t8.setText("");
        t9.setText("");
        t10.setText("");
        t11.setText("");
        t12.setText("");
        t13.setText("");
        t14.setText("");
        t15.setText("");
        t16.setText("");
        t17.setText("");
        t18.setText("");
        t19.setText("");
        t20.setText("");
        t21.setText("");
        t22.setText("");
        t23.setText("");
        t24.setText("");
        t25.setText("");
        t26.setText("");
        t27.setText("");
        t28.setText("");
        t29.setText("");
        t30.setText("");
        t31.setText("");
        t32.setText("");
        t33.setText("");
        t34.setText("");
        t35.setText("");
        t36.setText("");
        t37.setText("");
        t38.setText("");
        t39.setText("");
        t40.setText("");
        t41.setText("");
        t42.setText("");

// Variavel de alteração recebe dia, mes e ano atual.
        diaAltera = diaFixo;
        mesAltera = selecaoMes.getSelectedIndex();
        anoAltera = Integer.parseInt(selecaoAno.getSelectedItem().toString());

// Recebe total de dias de um mês.
        int totalDiaMes = 0;
        switch (mesAltera) {
            case 0:
                totalDiaMes = 31;
                break;
            case 1:
                int resultado = (anoAltera % 4); // Verificando se é ano Bissexto
                if (resultado == 0) {
                    totalDiaMes = 29;  // se sim, fev recebe 29 dias
                } else {
                    totalDiaMes = 28; // se não, fev recebe 28 dias
                }
                break;
            case 2:
                totalDiaMes = 31;
                break;
            case 3:
                totalDiaMes = 30;
                break;
            case 4:
                totalDiaMes = 31;
                break;
            case 5:
                totalDiaMes = 30;
                break;
            case 6:
                totalDiaMes = 31;
                break;
            case 7:
                totalDiaMes = 31;
                break;
            case 8:
                totalDiaMes = 30;
                break;
            case 9:
                totalDiaMes = 31;
                break;
            case 10:
                totalDiaMes = 30;
                break;
            case 11:
                totalDiaMes = 31;
                break;
            default:
                break;
        }
// Identificar qual dia da semana será o dia 1º    
        Calendar calendar = Calendar.getInstance();
        calendar.set(anoAltera, mesAltera, 1);
        int setDia = 0;

        int semana = calendar.get(Calendar.DAY_OF_WEEK);
        switch (semana) {
            case Calendar.SUNDAY:
                setDia = 1;
                break;
            case Calendar.MONDAY:
                setDia = 2;
                break;
            case Calendar.TUESDAY:
                setDia = 3;
                break;
            case Calendar.WEDNESDAY:
                setDia = 4;
                break;
            case Calendar.THURSDAY:
                setDia = 5;
                break;
            case Calendar.FRIDAY:
                setDia = 6;
                break;
            case Calendar.SATURDAY:
                setDia = 7;
                break;
            default:
                break;
        }

        /*Criando laço para iniciar a data baseada no dia da semana
    correspondente definido no "setdia"*/
        for (int i = 1; i <= totalDiaMes; i++) {

            switch (setDia) {
                case 1:
                    t1.setText("" + i);
                    break;
                case 2:
                    t2.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t2.setForeground(Color.red);
                    } else {
                        t2.setForeground(Color.black);
                    }
                    break;
                case 3:
                    t3.setText("" + i); // Se setdia for 3, o i (dia) começa no t3
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) { // if usado para colorir o dia atual de vermelho.
                        t3.setForeground(Color.red);
                    } else {
                        t3.setForeground(Color.black);
                    }
                    break;
                case 4:
                    t4.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t4.setForeground(Color.red);
                    } else {
                        t4.setForeground(Color.black);
                    }
                    break;
                case 5:
                    t5.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t5.setForeground(Color.red);
                    } else {
                        t5.setForeground(Color.black);
                    }
                    break;
                case 6:
                    t6.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t6.setForeground(Color.red);
                    } else {
                        t6.setForeground(Color.black);
                    }
                    break;
                case 7:
                    t7.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t7.setForeground(Color.red);
                    } else {
                        t7.setForeground(Color.black);
                    }
                    break;
                case 8:
                    t8.setText("" + i);
                    break;
                case 9:
                    t9.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t9.setForeground(Color.red);
                    } else {
                        t9.setForeground(Color.black);
                    }
                    break;
                case 10:
                    t10.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t10.setForeground(Color.red);
                    } else {
                        t10.setForeground(Color.black);
                    }
                    break;
                case 11:
                    t11.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t11.setForeground(Color.red);
                    } else {
                        t11.setForeground(Color.black);
                    }
                    break;
                case 12:
                    t12.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t12.setForeground(Color.red);
                    } else {
                        t12.setForeground(Color.black);
                    }
                    break;
                case 13:
                    t13.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t13.setForeground(Color.red);
                    } else {
                        t13.setForeground(Color.black);
                    }
                    break;
                case 14:
                    t14.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t14.setForeground(Color.red);
                    } else {
                        t14.setForeground(Color.black);
                    }
                    break;
                case 15:
                    t15.setText("" + i);
                    break;
                case 16:
                    t16.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t16.setForeground(Color.red);
                    } else {
                        t16.setForeground(Color.black);
                    }
                    break;
                case 17:
                    t17.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t17.setForeground(Color.red);
                    } else {
                        t17.setForeground(Color.black);
                    }
                    break;
                case 18:
                    t18.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t18.setForeground(Color.red);
                    } else {
                        t18.setForeground(Color.black);
                    }
                    break;
                case 19:
                    t19.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t19.setForeground(Color.red);
                    } else {
                        t19.setForeground(Color.black);
                    }
                    break;
                case 20:
                    t20.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t20.setForeground(Color.red);
                    } else {
                        t20.setForeground(Color.black);
                    }
                    break;
                case 21:
                    t21.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t21.setForeground(Color.red);
                    } else {
                        t21.setForeground(Color.black);
                    }
                    break;
                case 22:
                    t22.setText("" + i);
                    break;
                case 23:
                    t23.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t23.setForeground(Color.red);
                    } else {
                        t23.setForeground(Color.black);
                    }
                    break;
                case 24:
                    t24.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t24.setForeground(Color.red);
                    } else {
                        t24.setForeground(Color.black);
                    }
                    break;
                case 25:
                    t25.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t25.setForeground(Color.red);
                    } else {
                        t25.setForeground(Color.black);
                    }
                    break;
                case 26:
                    t26.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t26.setForeground(Color.red);
                    } else {
                        t26.setForeground(Color.black);
                    }
                    break;
                case 27:
                    t27.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t27.setForeground(Color.red);
                    } else {
                        t27.setForeground(Color.black);
                    }
                    break;
                case 28:
                    t28.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t28.setForeground(Color.red);
                    } else {
                        t28.setForeground(Color.black);
                    }
                    break;
                case 29:
                    t29.setText("" + i);
                    break;
                case 30:
                    t30.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t30.setForeground(Color.red);
                    } else {
                        t30.setForeground(Color.black);
                    }
                    break;
                case 31:
                    t31.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t31.setForeground(Color.red);
                    } else {
                        t31.setForeground(Color.black);
                    }
                    break;
                case 32:
                    t32.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t32.setForeground(Color.red);
                    } else {
                        t32.setForeground(Color.black);
                    }
                    break;
                case 33:
                    t33.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t33.setForeground(Color.red);
                    } else {
                        t33.setForeground(Color.black);
                    }
                    break;
                case 34:
                    t34.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t34.setForeground(Color.red);
                    } else {
                        t34.setForeground(Color.black);
                    }
                    break;
                case 35:
                    t35.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t35.setForeground(Color.red);
                    } else {
                        t35.setForeground(Color.black);
                    }
                    break;
                case 36:
                    t36.setText("" + i);
                    break;
                case 37:
                    t37.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t37.setForeground(Color.red);
                    } else {
                        t37.setForeground(Color.black);
                    }
                    break;
                case 38:
                    t38.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t38.setForeground(Color.red);
                    } else {
                        t38.setForeground(Color.black);
                    }
                    break;
                case 39:
                    t39.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t39.setForeground(Color.red);
                    } else {
                        t39.setForeground(Color.black);
                    }
                    break;
                case 40:
                    t40.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t40.setForeground(Color.red);
                    } else {
                        t40.setForeground(Color.black);
                    }
                    break;
                case 41:
                    t41.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t41.setForeground(Color.red);
                    } else {
                        t41.setForeground(Color.black);
                    }
                    break;
                case 42:
                    t42.setText("" + i);
                    if (i == diaFixo & mesAltera == mesFixo - 1 & anoAltera == anoFixo) {
                        t42.setForeground(Color.red);
                    } else {
                        t42.setForeground(Color.black);
                    }
                    break;
            }
            setDia++;
        }
        // Esse Código controla a cor das labels referente as datas.
        if (!"".equals(t1.getText())) { // Se diferente de vazio, opaco true.
            t1.setOpaque(true);
        } else {
            t1.setOpaque(false);
        }
        if (!"".equals(t2.getText())) {
            t2.setOpaque(true);
        } else {
            t2.setOpaque(false);
        }
        if (!"".equals(t3.getText())) {
            t3.setOpaque(true);
        } else {
            t3.setOpaque(false);
        }
        if (!"".equals(t4.getText())) {
            t4.setOpaque(true);
        } else {
            t4.setOpaque(false);
        }
        if (!"".equals(t5.getText())) {
            t5.setOpaque(true);
        } else {
            t5.setOpaque(false);
        }
        if (!"".equals(t6.getText())) {
            t6.setOpaque(true);
        } else {
            t6.setOpaque(false);
        }
        if (!"".equals(t7.getText())) {
            t7.setOpaque(true);
        } else {
            t7.setOpaque(false);
        }
        if (!"".equals(t8.getText())) {
            t8.setOpaque(true);
        } else {
            t8.setOpaque(false);
        }
        if (!"".equals(t9.getText())) {
            t9.setOpaque(true);
        } else {
            t9.setOpaque(false);
        }
        if (!"".equals(t10.getText())) {
            t10.setOpaque(true);
        } else {
            t10.setOpaque(false);
        }
        if (!"".equals(t11.getText())) {
            t11.setOpaque(true);
        } else {
            t11.setOpaque(false);
        }
        if (!"".equals(t12.getText())) {
            t12.setOpaque(true);
        } else {
            t12.setOpaque(false);
        }
        if (!"".equals(t13.getText())) {
            t13.setOpaque(true);
        } else {
            t13.setOpaque(false);
        }
        if (!"".equals(t14.getText())) {
            t14.setOpaque(true);
        } else {
            t14.setOpaque(false);
        }
        if (!"".equals(t15.getText())) {
            t15.setOpaque(true);
        } else {
            t15.setOpaque(false);
        }
        if (!"".equals(t16.getText())) {
            t16.setOpaque(true);
        } else {
            t16.setOpaque(false);
        }
        if (!"".equals(t17.getText())) {
            t17.setOpaque(true);
        } else {
            t17.setOpaque(false);
        }
        if (!"".equals(t18.getText())) {
            t18.setOpaque(true);
        } else {
            t18.setOpaque(false);
        }
        if (!"".equals(t19.getText())) {
            t19.setOpaque(true);
        } else {
            t19.setOpaque(false);
        }
        if (!"".equals(t20.getText())) {
            t20.setOpaque(true);
        } else {
            t20.setOpaque(false);
        }
        if (!"".equals(t21.getText())) {
            t21.setOpaque(true);
        } else {
            t21.setOpaque(false);
        }
        if (!"".equals(t22.getText())) {
            t22.setOpaque(true);
        } else {
            t22.setOpaque(false);
        }
        if (!"".equals(t23.getText())) {
            t23.setOpaque(true);
        } else {
            t23.setOpaque(false);
        }
        if (!"".equals(t24.getText())) {
            t24.setOpaque(true);
        } else {
            t24.setOpaque(false);
        }
        if (!"".equals(t25.getText())) {
            t25.setOpaque(true);
        } else {
            t25.setOpaque(false);
        }
        if (!"".equals(t26.getText())) {
            t26.setOpaque(true);
        } else {
            t26.setOpaque(false);
        }
        if (!"".equals(t27.getText())) {
            t27.setOpaque(true);
        } else {
            t27.setOpaque(false);
        }
        if (!"".equals(t28.getText())) {
            t28.setOpaque(true);
        } else {
            t28.setOpaque(false);
        }
        if (!"".equals(t29.getText())) {
            t29.setOpaque(true);
        } else {
            t29.setOpaque(false);
        }
        if (!"".equals(t30.getText())) {
            t30.setOpaque(true);
        } else {
            t30.setOpaque(false);
        }
        if (!"".equals(t31.getText())) {
            t31.setOpaque(true);
        } else {
            t31.setOpaque(false);
        }
        if (!"".equals(t32.getText())) {
            t32.setOpaque(true);
        } else {
            t32.setOpaque(false);
        }
        if (!"".equals(t33.getText())) {
            t33.setOpaque(true);
        } else {
            t33.setOpaque(false);
        }
        if (!"".equals(t34.getText())) {
            t34.setOpaque(true);
        } else {
            t34.setOpaque(false);
        }
        if (!"".equals(t35.getText())) {
            t35.setOpaque(true);
        } else {
            t35.setOpaque(false);
        }
        if (!"".equals(t36.getText())) {
            t36.setOpaque(true);
        } else {
            t36.setOpaque(false);
        }
        if (!"".equals(t37.getText())) {
            t37.setOpaque(true);
        } else {
            t37.setOpaque(false);
        }
        if (!"".equals(t38.getText())) {
            t38.setOpaque(true);
        } else {
            t38.setOpaque(false);
        }
        if (!"".equals(t39.getText())) {
            t39.setOpaque(true);
        } else {
            t39.setOpaque(false);
        }
        if (!"".equals(t40.getText())) {
            t40.setOpaque(true);
        } else {
            t40.setOpaque(false);
        }
        if (!"".equals(t41.getText())) {
            t41.setOpaque(true);
        } else {
            t41.setOpaque(false);
        }
        if (!"".equals(t42.getText())) {
            t42.setOpaque(true);
        } else {
            t42.setOpaque(false);
        }

    }

// Esse método gerencia efeitos de borda nas datas e cliques nas datas do calendário.
    public void Calendario_Evt() {

        t1.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t1.getText())) {
                    t1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t1.setBorder(null);
            }
            // COntrola os eventos relacionados a cliques nas datas do calendario.

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                // Evita que labels vazias possa ser clicadas e define data exibida no labelData. 
                if (!"".equals(t1.getText())) {
                    diaAltera = Integer.parseInt(t1.getText());
                    PreencheData();

                }
            }
        });

        t2.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t2.getText())) {
                    t2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t2.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t2.getText())) {
                    diaAltera = Integer.parseInt(t2.getText());
                    PreencheData();
                }
            }
        });

        t3.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t3.getText())) {
                    t3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t3.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t3.getText())) {
                    diaAltera = Integer.parseInt(t3.getText());
                    PreencheData();
                }
            }
        });

        t4.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t4.getText())) {
                    t4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t4.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t4.getText())) {
                    diaAltera = Integer.parseInt(t4.getText());
                    PreencheData();
                }
            }
        });

        t5.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t5.getText())) {
                    t5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t5.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t5.getText())) {
                    diaAltera = Integer.parseInt(t5.getText());
                    PreencheData();
                }
            }
        });

        t6.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t6.getText())) {
                    t6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t6.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t6.getText())) {
                    diaAltera = Integer.parseInt(t6.getText());
                    PreencheData();
                }
            }
        });

        t7.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t7.getText())) {
                    t7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t7.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t7.getText())) {
                    diaAltera = Integer.parseInt(t7.getText());
                    PreencheData();
                }
            }
        });

        t8.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t8.getText())) {
                    t8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t8.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t8.getText())) {
                    diaAltera = Integer.parseInt(t8.getText());
                    PreencheData();
                }
            }
        });

        t9.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t9.getText())) {
                    t9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t9.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t9.getText())) {
                    diaAltera = Integer.parseInt(t9.getText());
                    PreencheData();
                }
            }
        });

        t10.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t10.getText())) {
                    t10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t10.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t10.getText())) {
                    diaAltera = Integer.parseInt(t10.getText());
                    PreencheData();
                }
            }
        });

        t11.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t11.getText())) {
                    t11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t11.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t11.getText())) {
                    diaAltera = Integer.parseInt(t11.getText());
                    PreencheData();
                }
            }
        });

        t12.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t12.getText())) {
                    t12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t12.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t12.getText())) {
                    diaAltera = Integer.parseInt(t12.getText());
                    PreencheData();
                }
            }
        });

        t13.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t13.getText())) {
                    t13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t13.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t13.getText())) {
                    diaAltera = Integer.parseInt(t13.getText());
                    PreencheData();
                }
            }
        });

        t14.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t14.getText())) {
                    t14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t14.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t14.getText())) {
                    diaAltera = Integer.parseInt(t14.getText());
                    PreencheData();
                }
            }
        });

        t15.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t15.getText())) {
                    t15.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t15.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t15.getText())) {
                    diaAltera = Integer.parseInt(t15.getText());
                    PreencheData();
                }
            }
        });

        t16.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t16.getText())) {
                    t16.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t16.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t16.getText())) {
                    diaAltera = Integer.parseInt(t16.getText());
                    PreencheData();
                }
            }
        });

        t17.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t17.getText())) {
                    t17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t17.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t17.getText())) {
                    diaAltera = Integer.parseInt(t17.getText());
                    PreencheData();
                }
            }
        });

        t18.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t18.getText())) {
                    t18.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t18.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t18.getText())) {
                    diaAltera = Integer.parseInt(t18.getText());
                    PreencheData();
                }
            }
        });

        t19.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t19.getText())) {
                    t19.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t19.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t19.getText())) {
                    diaAltera = Integer.parseInt(t19.getText());
                    PreencheData();
                }
            }
        });

        t20.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t20.getText())) {
                    t20.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t20.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t20.getText())) {
                    diaAltera = Integer.parseInt(t20.getText());
                    PreencheData();
                }
            }
        });

        t21.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t21.getText())) {
                    t21.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t21.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t21.getText())) {
                    diaAltera = Integer.parseInt(t21.getText());
                    PreencheData();
                }
            }
        });

        t22.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t22.getText())) {
                    t22.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t22.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t22.getText())) {
                    diaAltera = Integer.parseInt(t22.getText());
                    PreencheData();
                }
            }
        });

        t23.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t23.getText())) {
                    t23.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t23.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t23.getText())) {
                    diaAltera = Integer.parseInt(t23.getText());
                    PreencheData();
                }
            }
        });

        t24.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t24.getText())) {
                    t24.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t24.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t24.getText())) {
                    diaAltera = Integer.parseInt(t24.getText());
                    PreencheData();
                }
            }
        });

        t25.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t25.getText())) {
                    t25.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t25.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t25.getText())) {
                    diaAltera = Integer.parseInt(t25.getText());
                    PreencheData();
                }
            }
        });

        t26.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t26.getText())) {
                    t26.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t26.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t26.getText())) {
                    diaAltera = Integer.parseInt(t26.getText());
                    PreencheData();
                }
            }
        });

        t27.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t27.getText())) {
                    t27.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t27.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t27.getText())) {
                    diaAltera = Integer.parseInt(t27.getText());
                    PreencheData();
                }
            }
        });

        t28.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t28.getText())) {
                    t28.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t28.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t28.getText())) {
                    diaAltera = Integer.parseInt(t28.getText());
                    PreencheData();
                }
            }
        });

        t29.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t29.getText())) {
                    t29.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t29.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t29.getText())) {
                    diaAltera = Integer.parseInt(t29.getText());
                    PreencheData();
                }
            }
        });

        t30.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t30.getText())) {
                    t30.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t30.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t30.getText())) {
                    diaAltera = Integer.parseInt(t30.getText());
                    PreencheData();
                }
            }
        });

        t31.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t31.getText())) {
                    t31.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t31.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t31.getText())) {
                    diaAltera = Integer.parseInt(t31.getText());
                    PreencheData();
                }
            }
        });

        t32.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t32.getText())) {
                    t32.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t32.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t32.getText())) {
                    diaAltera = Integer.parseInt(t32.getText());
                    PreencheData();
                }
            }
        });

        t33.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t33.getText())) {
                    t33.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t33.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t33.getText())) {
                    diaAltera = Integer.parseInt(t33.getText());
                    PreencheData();
                }
            }
        });

        t34.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t34.getText())) {
                    t34.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t34.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t34.getText())) {
                    diaAltera = Integer.parseInt(t34.getText());
                    PreencheData();
                }
            }
        });

        t35.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t35.getText())) {
                    t35.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t35.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t35.getText())) {
                    diaAltera = Integer.parseInt(t35.getText());
                    PreencheData();
                }
            }
        });

        t36.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t36.getText())) {
                    t36.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t36.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t36.getText())) {
                    diaAltera = Integer.parseInt(t36.getText());
                    PreencheData();
                }
            }
        });

        t37.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t37.getText())) {
                    t37.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t37.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t37.getText())) {
                    diaAltera = Integer.parseInt(t37.getText());
                    PreencheData();
                }
            }
        });

        t38.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t38.getText())) {
                    t38.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t38.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t38.getText())) {
                    diaAltera = Integer.parseInt(t38.getText());
                    PreencheData();
                }
            }
        });

        t39.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t39.getText())) {
                    t39.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t39.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t39.getText())) {
                    diaAltera = Integer.parseInt(t39.getText());
                    PreencheData();
                }
            }
        });

        t40.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t40.getText())) {
                    t40.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t40.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t40.getText())) {
                    diaAltera = Integer.parseInt(t40.getText());
                    PreencheData();
                }
            }
        });

        t41.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t41.getText())) {
                    t41.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t41.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t41.getText())) {
                    diaAltera = Integer.parseInt(t41.getText());
                    PreencheData();
                }
            }
        });

        t42.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!"".equals(t42.getText())) {
                    t42.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                }
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                t42.setBorder(null);
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!"".equals(t42.getText())) {
                    diaAltera = Integer.parseInt(t42.getText());
                    PreencheData();
                }
            }
        });
    }

    // Usado para preencher datas de dias menores que 10 com zero.
    public void PreencheData() {

        int mes1 = (selecaoMes.getSelectedIndex() + 1);
        String mes2 = "";

        if (mes1 < 10) {
            mes2 = "0" + mes1;
        } else {
            mes2 = "" + mes1;
        }
        String dia2 = "";
        if (diaAltera < 10) {
            dia2 = "0" + diaAltera;
        } else {
            dia2 = "" + diaAltera;
        }

        txtData.setText(dia2 + "/" + mes2 + "/" + selecaoAno.getSelectedItem());
        jLayeredPaneCalendar.setVisible(false);
    }

    //Preenche o Combo box Categoria com informacoes do bd através do laço while.
    //Cria vetor para receber Id_categoria do BD
    Vector<Integer> id_categoria = new Vector();

    public void ComboBoxCategoria() {
        String sql = ("SELECT * FROM categoria_lancamentofinanceiro descricao_categoria");
        try {
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                id_categoria.addElement(rs.getInt(1));
                cbxCategoria.addItem(rs.getString(2));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro Combo Box Categoria" + e);
        }

    }

    private void alterar() {

        // Divide a String Data em variáveis separadas
        String dia = txtData.getText().substring(0, 2);
        String mes = txtData.getText().substring(3, 5);
        String ano = txtData.getText().substring(6);

        //Reorganiza a data para o MySQL 
        String dataSQL = ano + "-" + mes + "-" + dia;

        // Recebe o indice da categoria selecionada na combobox
        int codcat = cbxCategoria.getSelectedIndex();
        codcat = codcat - 1;

        String sql = "UPDATE lancamentofinanceiro SET tipolancamento=?, descricao=?, valor=?, cod_categoria=?, "
                + "cod_usuario=?, status_lancamento=?, data_lancamento=? WHERE lancamentoId=?";

        try {
            pst = conexao.prepareStatement(sql);

            pst.setString(1, tipolancamento);
            pst.setString(2, txtDescricao.getText());
            pst.setString(3, txtValor.getText().replace(",", "."));
            pst.setInt(4, id_categoria.get(codcat));
            pst.setInt(5, id_usuario);
            pst.setString(6, cbxStatus.getSelectedItem().toString());
            pst.setString(7, dataSQL);
            pst.setString(8, txtCadId.getText());

            int adicionado = pst.executeUpdate();

            if ((tipolancamento.equals("")) || (txtDescricao.getText().isEmpty()) || (txtValor.getText().isEmpty()) || (id_categoria.isEmpty()) || (dataSQL.isEmpty()) || cbxStatus.equals("Selecione")) {
                JOptionPane.showMessageDialog(null, "Preencha Todos os Campos Obrigatórios.");
            } else {

                if (adicionado > 0) {
                    JOptionPane.showMessageDialog(null, "Informações Alteradas!");
                    limpar();

                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro no método Alterar " + e);
        }
    }

    private void excluir() {
        // confirmar a remoção do usuário

        int confirma = JOptionPane.showConfirmDialog(null, "Tem Certeza que Deseja Excluir?", "Atenção!", JOptionPane.YES_NO_OPTION);

        if (confirma == JOptionPane.YES_OPTION) {
            String sql = "DELETE FROM lancamentofinanceiro WHERE lancamentoId = ?";

            try {
                pst = conexao.prepareStatement(sql);
                pst.setString(1, txtCadId.getText());
                int apagado = pst.executeUpdate();

                if (apagado > 0) {

                    JOptionPane.showMessageDialog(null, "Lançamento Removido com Sucesso!");
                    limpar();
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro no método Excluir " + e);
            }
        }
    }

    private void povoar_tabelaCad() {

        try {

            String sql = "SELECT lancamentoID as ID,tipolancamento as Tipo, descricao as Descrição, valor as Valor, cod_categoria as Categoria, cod_usuario as Usuário, status_lancamento as Status, data_lancamento as Data FROM lancamentofinanceiro WHERE cod_usuario=" + id_usuario;

            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();

            // Essa linha usa a bibliotecars2xml para preencher a tabela.
            jTableEdit.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
        }
    }

    // Metodo pra setar os campos do form com a tabela
    public void setarCampos() {

        int setar = jTableEdit.getSelectedRow();
        String dataCap;

        txtCadId.setText(jTableEdit.getModel().getValueAt(setar, 0).toString());
        if ((jTableEdit.getModel().getValueAt(setar, 1)).toString().equals("Receita")) {
            receita.setSelected(true);
            tipolancamento = "Receita";
        } else {
            despesa.setSelected(true);
            tipolancamento = "Despesa";
        }
        txtDescricao.setText(jTableEdit.getModel().getValueAt(setar, 2).toString());
        txtValor.setText(jTableEdit.getModel().getValueAt(setar, 3).toString());
        cbxCategoria.setSelectedIndex(jTableEdit.getModel().getValueAt(setar, 4).hashCode());
        cbxStatus.setSelectedItem(jTableEdit.getModel().getValueAt(setar, 6));
        // Recebe da tabela YYYY-MM-DD
        dataCap = (jTableEdit.getModel().getValueAt(setar, 7).toString());
        // Divide os elementos da String
        String dia = dataCap.substring(8, 10);
        String mes = dataCap.substring(5, 7);
        String ano = dataCap.substring(0, 4);
        //Reorganiza a data para o Java 
        String dataSQL = dia + "/" + mes + "/" + ano;
        // seta no txtData.
        txtData.setText(dataSQL);

    }

    private void limpar() {

        txtCadId.setText(null);
        txtDescricao.setText(null);
        txtValor.setText(null);
        cbxStatus.setSelectedItem(null);
        cbxCategoria.setSelectedItem(null);
        txtData.setText(null);
        receita.setDisabledSelectedIcon(null);
        despesa.setDisabledSelectedIcon(null);
        //((DefaultTableModel) jTableCadastro.getModel()).setRowCount(0);

    }

}
